name: OpenOrClosed - Release

on:
  push:
    branches: [ master ]

env:
  SOLUTION: OpenOrClosed.sln
  PLUGIN_PROJECT: OpenOrClosed/OpenOrClosed.csproj
  CORE_PROJECT: OpenOrClosed.Core/OpenOrClosed.Core.csproj

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['7.x' ]

    steps:
    - uses: actions/checkout@v2

    - name: Get Release Version
      id: package_version
      uses: KageKirin/get-csproj-version@v0.0.1
      with:
        file: ${{ env.PLUGIN_PROJECT }}
        regex: ^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$

    - name: Check Version v${{ steps.package_version.outputs.version }} Pre-Release state
      id: check_prerelease
      run: |
        if ('${{ steps.package_version.outputs.version }}' -match '^[0-9]+\.[0-9]+\.[0-9]+-.+$') {
            echo "Pre-Release detected"
            echo "::set-output name=prerelease::true"
        } else {
            "echo Pre-Release NOT detected"
            echo "::set-output name=prerelease::false"
        }

    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3

      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - run: dotnet build --configuration Release

    - name: Create Nuget Packages
      run: dotnet pack --configuration Release -o  ../build.out/
      
    - name: Publish to NuGet
      working-directory: build.out
      run: dotnet nuget push "*.nupkg" --skip-duplicate --api-key "$env:apiKey" -s https://api.nuget.org/v3/index.json
      env:
        apiKey: ${{ secrets.NUGET_API_KEY }}

    - uses: avakar/tag-and-release@v1
      name: Create Release Tag v${{ steps.package_version.outputs.version }}
      id: release
      with:
        tag_name: v${{ steps.package_version.outputs.version }}
        prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Release information for v${{ steps.package_version.outputs.version }}
      run: |
        echo Release Id: ${{ steps.release.outputs.id }}
        echo Upload URL: "${{ steps.release.outputs.upload_url }}"
        echo Release URL: "${{ steps.release.outputs.html_url }}"
